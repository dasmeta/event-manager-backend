/* tslint:disable */
/* eslint-disable */
/**
 * Tutor
 * Event Manager Backend service is based on Strapi v3 JS framework.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: aram@dasmeta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Event } from '../models';
import { EventsCalculatesinglestatsBody } from '../models';
import { EventsCleananomalyBody } from '../models';
import { EventsGeterrorBody } from '../models';
import { EventsMarkasfailBody } from '../models';
import { EventsMarkassuccessBody } from '../models';
import { EventsMarkmissingaserrorBody } from '../models';
import { EventsMarksingleassuccessBody } from '../models';
import { EventsPopulatemissingBody } from '../models';
import { EventsRepublisherrorBody } from '../models';
import { EventsRepublishfailBody } from '../models';
import { EventsRepublishpreconditionfailBody } from '../models';
import { EventsRepublishsingleerrorBody } from '../models';
import { InlineResponse200 } from '../models';
import { UpdateeventIdBody } from '../models';
/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new record
         * @param {EventsCalculatesinglestatsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCalculateSingleStatsPost: async (body: EventsCalculatesinglestatsBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsCalculateSingleStatsPost.');
            }
            const localVarPath = `/events/calculate-single-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCalculateStatsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/calculate-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsCleananomalyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCleanAnomalyPost: async (body: EventsCleananomalyBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsCleanAnomalyPost.');
            }
            const localVarPath = `/events/clean-anomaly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
         * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsFindGet: async (limit?: number, sort?: string, start?: number, ?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (start !== undefined) {
                localVarQueryParameter['_start'] = start;
            }

            if ( !== undefined) {
                localVarQueryParameter['&#x3D;'] = ;
            }

            if (ne !== undefined) {
                localVarQueryParameter['_ne'] = ne;
            }

            if (lt !== undefined) {
                localVarQueryParameter['_lt'] = lt;
            }

            if (lte !== undefined) {
                localVarQueryParameter['_lte'] = lte;
            }

            if (gt !== undefined) {
                localVarQueryParameter['_gt'] = gt;
            }

            if (gte !== undefined) {
                localVarQueryParameter['_gte'] = gte;
            }

            if (contains !== undefined) {
                localVarQueryParameter['_contains'] = contains;
            }

            if (containss !== undefined) {
                localVarQueryParameter['_containss'] = containss;
            }

            if (_in) {
                localVarQueryParameter['_in'] = _in;
            }

            if (nin) {
                localVarQueryParameter['_nin'] = nin;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsGeterrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsGetErrorPost: async (body: EventsGeterrorBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsGetErrorPost.');
            }
            const localVarPath = `/events/get-error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsGetEventGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/get-event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsGetHistoryByEventsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/get-history-by-events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsMarkasfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsMarkAsFailPost: async (body: EventsMarkasfailBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsMarkAsFailPost.');
            }
            const localVarPath = `/events/mark-as-fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsMarkassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsMarkAsSuccessPost: async (body: EventsMarkassuccessBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsMarkAsSuccessPost.');
            }
            const localVarPath = `/events/mark-as-success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsMarkmissingaserrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsMarkMissingAsErrorPost: async (body: EventsMarkmissingaserrorBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsMarkMissingAsErrorPost.');
            }
            const localVarPath = `/events/mark-missing-as-error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsMarksingleassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsMarkSingleAsSuccessPost: async (body: EventsMarksingleassuccessBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsMarkSingleAsSuccessPost.');
            }
            const localVarPath = `/events/mark-single-as-success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsPopulatemissingBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsPopulateMissingPost: async (body: EventsPopulatemissingBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsPopulateMissingPost.');
            }
            const localVarPath = `/events/populate-missing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsRepublisherrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRepublishErrorPost: async (body: EventsRepublisherrorBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsRepublishErrorPost.');
            }
            const localVarPath = `/events/republish-error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsRepublishfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRepublishFailPost: async (body: EventsRepublishfailBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsRepublishFailPost.');
            }
            const localVarPath = `/events/republish-fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsRepublishpreconditionfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRepublishPreconditionFailPost: async (body: EventsRepublishpreconditionfailBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsRepublishPreconditionFailPost.');
            }
            const localVarPath = `/events/republish-precondition-fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {EventsRepublishsingleerrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRepublishSingleErrorPost: async (body: EventsRepublishsingleerrorBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsRepublishSingleErrorPost.');
            }
            const localVarPath = `/events/republish-single-error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {UpdateeventIdBody} body 
         * @param {string} id ID of event to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsUpdateEventIdPost: async (body: UpdateeventIdBody, id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsUpdateEventIdPost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsUpdateEventIdPost.');
            }
            const localVarPath = `/events/update-event/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new record
         * @param {EventsCalculatesinglestatsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCalculateSingleStatsPost(body: EventsCalculatesinglestatsBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsCalculatesinglestatsBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsCalculateSingleStatsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCalculateStatsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateeventIdBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsCalculateStatsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsCleananomalyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCleanAnomalyPost(body: EventsCleananomalyBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsCleananomalyBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsCleanAnomalyPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
         * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsFindGet(limit?: number, sort?: string, start?: number, ?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsFindGet(limit, sort, start, , ne, lt, lte, gt, gte, contains, containss, _in, nin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsGeterrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsGetErrorPost(body: EventsGeterrorBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsGeterrorBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsGetErrorPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsGetEventGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsGetEventGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsGetHistoryByEventsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsGetHistoryByEventsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsMarkasfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsMarkAsFailPost(body: EventsMarkasfailBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsMarkasfailBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsMarkAsFailPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsMarkassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsMarkAsSuccessPost(body: EventsMarkassuccessBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsMarkassuccessBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsMarkAsSuccessPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsMarkmissingaserrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsMarkMissingAsErrorPost(body: EventsMarkmissingaserrorBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsMarkmissingaserrorBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsMarkMissingAsErrorPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsMarksingleassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsMarkSingleAsSuccessPost(body: EventsMarksingleassuccessBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsMarksingleassuccessBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsMarkSingleAsSuccessPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsPopulatemissingBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsPopulateMissingPost(body: EventsPopulatemissingBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsPopulatemissingBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsPopulateMissingPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsRepublisherrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsRepublishErrorPost(body: EventsRepublisherrorBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsRepublisherrorBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsRepublishErrorPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsRepublishfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsRepublishFailPost(body: EventsRepublishfailBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsRepublishfailBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsRepublishFailPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsRepublishpreconditionfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsRepublishPreconditionFailPost(body: EventsRepublishpreconditionfailBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsRepublishpreconditionfailBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsRepublishPreconditionFailPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {EventsRepublishsingleerrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsRepublishSingleErrorPost(body: EventsRepublishsingleerrorBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsRepublishsingleerrorBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsRepublishSingleErrorPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {UpdateeventIdBody} body 
         * @param {string} id ID of event to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsUpdateEventIdPost(body: UpdateeventIdBody, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateeventIdBody>> {
            const localVarAxiosArgs = await EventApiAxiosParamCreator(configuration).eventsUpdateEventIdPost(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new record
         * @param {EventsCalculatesinglestatsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCalculateSingleStatsPost(body: EventsCalculatesinglestatsBody, options?: any): AxiosPromise<EventsCalculatesinglestatsBody> {
            return EventApiFp(configuration).eventsCalculateSingleStatsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCalculateStatsGet(options?: any): AxiosPromise<UpdateeventIdBody> {
            return EventApiFp(configuration).eventsCalculateStatsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsCleananomalyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCleanAnomalyPost(body: EventsCleananomalyBody, options?: any): AxiosPromise<EventsCleananomalyBody> {
            return EventApiFp(configuration).eventsCleanAnomalyPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
         * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsFindGet(limit?: number, sort?: string, start?: number, ?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: any): AxiosPromise<Array<Event>> {
            return EventApiFp(configuration).eventsFindGet(limit, sort, start, , ne, lt, lte, gt, gte, contains, containss, _in, nin, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsGeterrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsGetErrorPost(body: EventsGeterrorBody, options?: any): AxiosPromise<EventsGeterrorBody> {
            return EventApiFp(configuration).eventsGetErrorPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsGetEventGet(options?: any): AxiosPromise<InlineResponse200> {
            return EventApiFp(configuration).eventsGetEventGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsGetHistoryByEventsGet(options?: any): AxiosPromise<InlineResponse200> {
            return EventApiFp(configuration).eventsGetHistoryByEventsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsMarkasfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsMarkAsFailPost(body: EventsMarkasfailBody, options?: any): AxiosPromise<EventsMarkasfailBody> {
            return EventApiFp(configuration).eventsMarkAsFailPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsMarkassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsMarkAsSuccessPost(body: EventsMarkassuccessBody, options?: any): AxiosPromise<EventsMarkassuccessBody> {
            return EventApiFp(configuration).eventsMarkAsSuccessPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsMarkmissingaserrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsMarkMissingAsErrorPost(body: EventsMarkmissingaserrorBody, options?: any): AxiosPromise<EventsMarkmissingaserrorBody> {
            return EventApiFp(configuration).eventsMarkMissingAsErrorPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsMarksingleassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsMarkSingleAsSuccessPost(body: EventsMarksingleassuccessBody, options?: any): AxiosPromise<EventsMarksingleassuccessBody> {
            return EventApiFp(configuration).eventsMarkSingleAsSuccessPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsPopulatemissingBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsPopulateMissingPost(body: EventsPopulatemissingBody, options?: any): AxiosPromise<EventsPopulatemissingBody> {
            return EventApiFp(configuration).eventsPopulateMissingPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsRepublisherrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRepublishErrorPost(body: EventsRepublisherrorBody, options?: any): AxiosPromise<EventsRepublisherrorBody> {
            return EventApiFp(configuration).eventsRepublishErrorPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsRepublishfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRepublishFailPost(body: EventsRepublishfailBody, options?: any): AxiosPromise<EventsRepublishfailBody> {
            return EventApiFp(configuration).eventsRepublishFailPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsRepublishpreconditionfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRepublishPreconditionFailPost(body: EventsRepublishpreconditionfailBody, options?: any): AxiosPromise<EventsRepublishpreconditionfailBody> {
            return EventApiFp(configuration).eventsRepublishPreconditionFailPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {EventsRepublishsingleerrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRepublishSingleErrorPost(body: EventsRepublishsingleerrorBody, options?: any): AxiosPromise<EventsRepublishsingleerrorBody> {
            return EventApiFp(configuration).eventsRepublishSingleErrorPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {UpdateeventIdBody} body 
         * @param {string} id ID of event to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsUpdateEventIdPost(body: UpdateeventIdBody, id: string, options?: any): AxiosPromise<UpdateeventIdBody> {
            return EventApiFp(configuration).eventsUpdateEventIdPost(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export class EventApi extends BaseAPI {
    /**
     * Create a new record
     * @param {EventsCalculatesinglestatsBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsCalculateSingleStatsPost(body: EventsCalculatesinglestatsBody, options?: any) {
        return EventApiFp(this.configuration).eventsCalculateSingleStatsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsCalculateStatsGet(options?: any) {
        return EventApiFp(this.configuration).eventsCalculateStatsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsCleananomalyBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsCleanAnomalyPost(body: EventsCleananomalyBody, options?: any) {
        return EventApiFp(this.configuration).eventsCleanAnomalyPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [limit] Maximum number of results possible
     * @param {string} [sort] Sort according to a specific field.
     * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
     * @param {string} [] Get entries that matches exactly your input
     * @param {string} [ne] Get records that are not equals to something
     * @param {string} [lt] Get record that are lower than a value
     * @param {string} [lte] Get records that are lower than or equal to a value
     * @param {string} [gt] Get records that are greater than a value
     * @param {string} [gte] Get records that are greater than  or equal a value
     * @param {string} [contains] Get records that contains a value
     * @param {string} [containss] Get records that contains (case sensitive) a value
     * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
     * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsFindGet(limit?: number, sort?: string, start?: number, ?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: any) {
        return EventApiFp(this.configuration).eventsFindGet(limit, sort, start, , ne, lt, lte, gt, gte, contains, containss, _in, nin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsGeterrorBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsGetErrorPost(body: EventsGeterrorBody, options?: any) {
        return EventApiFp(this.configuration).eventsGetErrorPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsGetEventGet(options?: any) {
        return EventApiFp(this.configuration).eventsGetEventGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsGetHistoryByEventsGet(options?: any) {
        return EventApiFp(this.configuration).eventsGetHistoryByEventsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsMarkasfailBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsMarkAsFailPost(body: EventsMarkasfailBody, options?: any) {
        return EventApiFp(this.configuration).eventsMarkAsFailPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsMarkassuccessBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsMarkAsSuccessPost(body: EventsMarkassuccessBody, options?: any) {
        return EventApiFp(this.configuration).eventsMarkAsSuccessPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsMarkmissingaserrorBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsMarkMissingAsErrorPost(body: EventsMarkmissingaserrorBody, options?: any) {
        return EventApiFp(this.configuration).eventsMarkMissingAsErrorPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsMarksingleassuccessBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsMarkSingleAsSuccessPost(body: EventsMarksingleassuccessBody, options?: any) {
        return EventApiFp(this.configuration).eventsMarkSingleAsSuccessPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsPopulatemissingBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsPopulateMissingPost(body: EventsPopulatemissingBody, options?: any) {
        return EventApiFp(this.configuration).eventsPopulateMissingPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsRepublisherrorBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsRepublishErrorPost(body: EventsRepublisherrorBody, options?: any) {
        return EventApiFp(this.configuration).eventsRepublishErrorPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsRepublishfailBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsRepublishFailPost(body: EventsRepublishfailBody, options?: any) {
        return EventApiFp(this.configuration).eventsRepublishFailPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsRepublishpreconditionfailBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsRepublishPreconditionFailPost(body: EventsRepublishpreconditionfailBody, options?: any) {
        return EventApiFp(this.configuration).eventsRepublishPreconditionFailPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {EventsRepublishsingleerrorBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsRepublishSingleErrorPost(body: EventsRepublishsingleerrorBody, options?: any) {
        return EventApiFp(this.configuration).eventsRepublishSingleErrorPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {UpdateeventIdBody} body 
     * @param {string} id ID of event to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventsUpdateEventIdPost(body: UpdateeventIdBody, id: string, options?: any) {
        return EventApiFp(this.configuration).eventsUpdateEventIdPost(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
